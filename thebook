/* Книга:
 - идентификатор;
 - название;
 - автор;
 - код издания;
 - текстовое описание;
 - статус (забронирована, на руках или в библиотеке);
 - номер читательского билета пользователя, который забронировал или взял книгу.*/

/* Книга у читателя:
 - идентификатор;
 - статус (забронирована, на руках или в библиотеке)
 - номер читательского билета пользователя, который забронировал или взял книгу. */

/* Класс с информацией о взаимодействии читателей с книгой. Идентификатором связывается с классом Книга. 
Сюда же можно добавить поля для сохранения истории читателей, но в задании это не описано */

class readersticket
{
    public int book:book_id;
    public string book_status;
    public int reader:readers_ticket;
    // поля класса

// конструкторы класса
доступ имя_класса(список формальных параметров)
  {

   // тело конструктора
   // (инициализация полей класса)
}
}

/* Тут хранится информация о содержании книги, без связи с читателями. 
Идентификатор выдаётся автоматически при добавлении книги, а всё остальное можно поменять. */


    class Book
    {
        public int id;
        public string bookName;
        public string autor;
        public string publishersCode;
        public string description;
        public string statusBook;
        // поля класса


        public Book() //необязательный начальный конструктор без параметров, в теории можно удалить
        {
            id = 0;
            bookName = "Название книги";
            autor = "ФИО автора";
            publishersCode = "Код публикации";
            description = "Описание";
            statusBook = "В библиотеке";
        }

        public Book(int id, string bookName, string autor, string publishersCode, string description) //перегруженный конструктор с параметрами
        {
            this.id = id;
            this.bookName = bookName;
            this.autor = autor;
            this.publishersCode = publishersCode;
            this.description = description;
            statusBook = "В библиотеке";
        }
    }
